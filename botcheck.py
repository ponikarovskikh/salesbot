from telebot import *
from telebot.types import *
from telebot.util import quick_markup
from telebot.callback_data import CallbackData, CallbackDataFilter
import logging
from sql import *
from keyboards import *
from requests.exceptions import ReadTimeout
logging.basicConfig(filename='bot_log.txt', level=logging.INFO)
bot=telebot.TeleBot(token='6304024040:AAGrVuOeVr6-uHbKweeWfBRX56__xT7b1mc',disable_web_page_preview=True)



parseinfo=['iphone 15','iphone 14','–∞–π—Ñ–æ–Ω 14']





@bot.message_handler(commands=['start'])
def welcome(msg:Message):
    username = msg.from_user.username
    user_id=msg.from_user.id
    chat_id=msg.chat.id
    bot.send_message(msg.chat.id,text=f'–ü—Ä–∏–≤–µ—Ç,{username} –≠—Ç–æ –±–æ—Ç –≤–æ—Ä–æ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–∞—Ç–æ–≤ –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º')
    if add_users_field(user_id, username,chat_id) =='new added':
        bot.send_message(msg.chat.id,'–î—Ä—É–≥, –≤–∏–¥–∏–º —á—Ç–æ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º',reply_markup=menu_keyboard_1stage())
    else:
        bot.send_message(msg.chat.id,'–î—Ä—É–≥, –∏ —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞—Å—Ç–≤—É–π!',reply_markup=menu_keyboard_1stage())


@bot.message_handler(text=['–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'])
def menu(msg:Message):
    bot.send_message(msg.chat.id,text=f'–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä:',reply_markup=menu_keyboard_2stage())









# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è  –∞–π–¥–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
@bot.message_handler(commands=['ids'])
def idsend(msg:Message):
    username = msg.from_user.username
    link = f"[{username}](https://t.me/{username})"
    bot.send_message(msg.chat.id, link, parse_mode='Markdown', disable_web_page_preview=True)

#–±–ª–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@bot.message_handler(commands=['keywords'])
def kwrdupdt(msg:Message):
    if len(parseinfo)==0:
        bot.send_message(msg.chat.id,'üí•üî¶ <b>–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n–°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑.',parse_mode='html',reply_markup=adddelete_keywords())
    elif len(parseinfo)>=0:
        keytext='\n'.join(parseinfo)
        print(keytext)
        bot.send_message(msg.chat.id,f'üí•üî¶ <b>–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n–°–µ–π—á–∞—Å —É —Ç–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n{keytext}',parse_mode='html',reply_markup=adddelete_keywords())















#–±–∞–Ω–ª–∏—Å—Ç
@bot.message_handler(commands=['banlist'])
def block_list(msg:Message):
    if get_blocked_users(msg.from_user.id,'len')==0:
            bot.send_message(msg.chat.id,'‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—é–¥–∏\n\n–£–ø—Å,—Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç')
    elif get_blocked_users(msg.from_user.id,'len')>=0:
        bot.send_message(msg.chat.id,f'‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—é–¥–∏\n\n–õ—é–¥–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–µ:'
                                     ,reply_markup=banlistmarkup(msg.from_user.id))

#-----------------------------------------------------------------------------------------------------------------
                        #–ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
# —á–µ–∫–∞—Ç—å –≤—Å–µ —Å–º—Å –∏–∑ —á–∞—Ç–æ–≤
@bot.message_handler(content_types=['text'])
def messagecheck(msg:Message):
    print(msg.text)
    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(msg.chat.id, text=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu_keyboard_1stage())
    if msg.text=='–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
        bot.send_message(msg.chat.id, text=f'–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä:', reply_markup=menu_keyboard_2stage())
    if msg.text=='–ë–ª–æ–∫-–ª–∏—Å—Ç':
        bot.send_message(msg.chat.id,'–†–∞–∑–¥–µ–ª –ë–ª–æ–∫-–ª–∏—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
        block_list(msg)
    if msg.text == '–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã':
        bot.send_message(msg.chat.id,'–†–∞–∑–¥–µ–ª –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if msg.text == 'Premium-—Ç–∞—Ä–∏—Ñ':
        bot.send_message(msg.chat.id, '–†–∞–∑–¥–µ–ª Premium-—Ç–∞—Ä–∏—Ñ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if msg.text == '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞':
        bot.send_message(msg.chat.id, '–†–∞–∑–¥–µ–ª –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if   msg.text == '–ü—Ä–æ–¥–∞–∂–∏ –Ω–∞ –ø–∞—É–∑—É':
        bot.send_message(msg.chat.id, '–†–∞–∑–¥–µ–ª –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –ø–∞—É–∑—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if   msg.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤':
        bot.send_message(msg.chat.id, '–†–∞–∑–¥–µ–ª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')

    if msg.from_user.id not in get_blocked_users(msg.from_user.id,'dict'):
        for element in parseinfo:
            if element.lower() in msg.text.lower():
                print(element)
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
                sender_username = msg.from_user.username
                sender_user_id=msg.from_user.id
                text=msg.text
                link = f"[{sender_username}](https://t.me/{sender_username})\n\n" \
            f"{text}"
                bot.send_message(msg.from_user.id, link, parse_mode='Markdown', disable_web_page_preview=True,reply_markup=block_keyboard(sender_user_id,sender_username))
                break

#–ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda callback:callback.data)
def callback_logic(callback):
        print(callback.data)
        if str(callback.data).startswith('ban_'):
            clback=callback.data.split('_')
            block_id = int(clback[1])
            block_name=clback[2]
            # blocklist=add_delete_get_clear_blocked_users(block_id,block_name,callback.message.chat.id,'getall')
            need_ban=None
            for ban_item in add_delete_get_clear_blocked_users(block_id,block_name,callback.message.chat.id,'getall'):
                if block_id  not in ban_item:
                    need_ban=1
                else :
                    need_ban=0
            if need_ban==1:
                print(block_id,'–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')
            if add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')==1:
                    bot.edit_message_text(f'{block_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',callback.message.chat.id,callback.message.id,reply_markup=unblock_keyboard(block_id, block_name))
        elif str(callback.data).startswith('unban_') :
            clback = callback.data.split('_')
            unblock_id = int(clback[1])
            unblock_name = clback[2]
            print(unblock_id,unblock_name)

            for ban_item in add_delete_get_clear_blocked_users(unblock_id,unblock_name,callback.message.chat.id,'getall'):
                if unblock_id in ban_item:
                    print(unblock_id,'E—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
                    if add_delete_get_clear_blocked_users(unblock_id,unblock_name,callback.message.chat.id,'delete')==2 :
                        bot.edit_message_text(f'{unblock_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', callback.message.chat.id, callback.message.id,
                        reply_markup=block_keyboard(unblock_id, unblock_name))






while True:
    bot.polling(none_stop=True,skip_pending=True)
    try:
        bot.polling(none_stop=True)
    except ReadTimeout as e:
        print(f"ReadTimeout error: {e}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è —Ç–∞–π–º-–∞—É—Ç–∞
        pass
    except Exception as e:
        print(f"An error occurred: {e}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        pass


