from telebot import asyncio_filters
from telebot.asyncio_storage import StateMemoryStorage as STM
from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_handler_backends import StatesGroup as STSGR,State as ste
from Text_of_messages import *
from config import *
from keyboards import *
from sqlfile import *
import asyncio
from pyrogram import Client,methods as MTHPYRO


global app
global bot
import pandas as pd
import aioschedule
import aiosqlite
import time
from apscheduler.schedulers.background import BackgroundScheduler



last_message_len=0

async def clientside(bot):
        class SuperStates(STSGR):
            getkeyword = ste()
            getnewprice=ste()
            getnamemail=ste()
            getcontentmail=ste()
            getpricelist=ste()


        # –ø—Ä–∞–π—Å–ª–∏—Å—Ç
        @bot.message_handler(state=SuperStates.getpricelist,content_types=['document'])
        async def pricelistprocess(msg):
            chat_id = msg.chat.id
            user_id = msg.from_user.id

            username=msg.from_user.username
            if username is None:
                await bot.send_message(msg.chat.id,'–£–ø—Å —É –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Æ–∑–µ—Ä–Ω—ç–π–º –≤ –≤–∞—à–µ–º T–µ–ª–µ–≥—Ä–∞–º–º-–ø—Ä–æ—Ñ–∏–ª–µ,'
                                                '–±–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫–∞–∫. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. ')
                await bot.delete_state(msg.from_user.id, msg.chat.id)
                pass
            else:
                try:
                    file_info =await bot.get_file(msg.document.file_id)
                    # print(file_info)
                    downloaded_file =await bot.download_file(file_info.file_path)
                    # print(downloaded_file,'down-')
                except Exception as e:
                    print(e)

                file_name = 'temp.xlsx'
                with open(file_name, 'wb') as new_file:
                    new_file.write(downloaded_file)

                try:
                    df = pd.read_excel(file_name, usecols='A:B')
                    # print(df, 'df')
                    data = [(row) for index, row in df.iterrows()]
                    # print(data, '–ø–∏—Å–æ–∫')
                    create_table_and_insert_data(user_id, data,username)
                    await bot.send_message(chat_id, "–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",reply_markup=pricelistmenu())
                except Exception as e:
                    await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

                if os.path.exists(file_name):
                    os.remove(file_name)

        # admin_control
        @bot.message_handler(commands=['admininfo'])
        async def userslist(msg: Message):
            admins=all_admins()
            if msg.from_user.id in admins:
                all_users,all_users_play,users_premium_list=all_users_list()
                sum,price,last_month,quant_sold,last_year = profit_calc()

                await bot.send_message(msg.chat.id,parametrs_info.format(all_users,all_users_play,users_premium_list,
                                                                         price,quant_sold,sum,last_month,last_year),
                                       parse_mode='HTML')

        @bot.message_handler(commands=['setprice'])
        async def pricesetinit(msg: Message):
            admins = all_admins()
            if msg.from_user.id in admins:
                await bot.send_message(msg.chat.id,f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É Premium')
                await bot.set_state(chat_id=msg.from_user.id, state=SuperStates.getnewprice, user_id=
                msg.chat.id)

        @bot.message_handler(state=SuperStates.getnewprice)
        async def pricesetprocess(msg: Message):
            price=msg.text
            try:
                # Try to convert the text to an integer
                value = int(price)
                if  setprice('set',value) == 1:
                    await  bot.send_message(msg.chat.id, f'–ù–æ–≤–∞—è —Ü–µ–Ω–∞ Premium: {price} —Ä—É–±')
                await bot.delete_state(msg.from_user.id, msg.chat.id)
            except ValueError:
                await bot.send_message(msg.chat.id, f'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑')
                await bot.set_state(chat_id=msg.from_user.id, state=SuperStates.getnewprice, user_id=
                msg.chat.id)

        @bot.message_handler(commands=['mail'])
        async def mailing(callback):
            await bot.send_message(callback.message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±—É–¥—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ')
            print(callback.message.chat.id,callback.from_user.id)
            await bot.set_state(chat_id=callback.from_user.id, state=SuperStates.getnamemail, user_id=
                callback.message.chat.id)
            async with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
                    data['namemail'] = None
                    data['contentmail'] = None
                    print('mailing',data)


        @bot.message_handler(state=SuperStates.getnamemail)
        async def mailingnameprocess(msg):
            name=msg.text
            print(name)
            # await bot.set_state(chat_id=msg.from_user.id, state=SuperStates.getnamemail, user_id=
            # msg.chat.id)
            async with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
                print('mailingnameprocess',data)
                data['namemail'] = name
                content=data['contentmail']
                if  data['contentmail'] is None:
                    await bot.send_message(msg.chat.id, f'–ù–∞–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ {str(name).capitalize()}')
                    await bot.set_state(chat_id=msg.from_user.id, state=SuperStates.getcontentmail, user_id=
                    msg.chat.id)
                    print('–ü—Ä–∏–≤–µ—Ç',data)

                else:
                    await bot.set_state(chat_id=msg.from_user.id, state=SuperStates.getcontentmail, user_id=
                    msg.chat.id)
                    async with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
                        data['namemail'] = name
                        # if data['contentmail'] is not None:
                        #     data['contentmail']=content

                    print('—Ç—ã –∫—Ç–æ',data)
                    await mailingcontentprocess(msg)





        @bot.message_handler(state=SuperStates.getcontentmail)
        async def mailingcontentprocess(msg:Message,callback=None):
            if msg is not   None:
                content = msg.text
                async with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
                    if data['contentmail'] is None:
                        data['contentmail'] = content
                        print('–≤–∞—à',data)
                    if  data['contentmail'] !=content and content != data['namemail']:
                        print('pltcm')
                        data['contentmail'] = content

                print('ailingcontentprocess finish  ',data)
                await bot.send_message(msg.chat.id, f'–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ '
                                                    f'{data["namemail"].capitalize()}:\n\n'
                                                    f'{data["contentmail"]}',reply_markup=addmail_reject())
            else:
                async with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
                    await bot.send_message(msg.chat.id, f'–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ '
                                                        f'{data["namemail"].capitalize()}:\n\n'
                                                        f'{data["contentmail"]}', reply_markup=addmail_reject())


        @bot.message_handler(commands=['start'])
        async def welcome(msg:Message):
                if  'private' in msg.chat.type:

                    username = msg.from_user.username
                    user_id=msg.from_user.id
                    chat_id=msg.chat.id

                    await bot.send_message(msg.chat.id,text=f'–ü—Ä–∏–≤–µ—Ç, {username}!\n\n{welcome_preview}')
                    if add_users_field(user_id, username,chat_id) =='new added':
                        await bot.send_message(msg.chat.id,'–¢–∞–∫ –∫–∞–∫ –≤—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ '
                                                           '<b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æüìö</b>',  parse_mode='html', reply_markup=menu_keyboard_2stage(user_id))
                    else:
                       await  bot.send_message(msg.chat.id,'–î—Ä—É–≥, –∏ —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞—Å—Ç–≤—É–π!',reply_markup=menu_keyboard_1stage())

        # @bot.message_handler(text=['–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'])
        async def sell(msg:Message):
                  await bot.send_message(msg.chat.id,text=f'–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤.\n\n'
                                                          f'–°—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º '
                                                          f'–∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n'
                                                          f'–î–ª—è –æ–∑–Ω–∫–∞–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                                    reply_markup=menu_keyboard_2stage(msg.chat.id))




        @bot.message_handler(commands=['support'])
        async def  support_handler(msg:Message):
            # print('support')
            if msg.chat.type == 'private':
                await  bot.send_message(msg.chat.id, text=support_info, parse_mode='HTML',reply_markup=menu_keyboard_2stage(
                    msg.chat.id))

            # –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è  –∞–π–¥–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        @bot.message_handler(commands=['ids'])
        async def idsend(msg:Message):
                if msg.chat.type=='private':
                    username = msg.from_user.username
                    link = f"[{username}](https://t.me/{username})"
                    await  bot.send_message(msg.chat.id, link, parse_mode='Markdown', disable_web_page_preview=True,
                                      reply_markup=menu_keyboard_2stage(msg.chat.id))

        #–±–ª–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        @bot.message_handler(commands=['mykeywords'])
        async def kwrdupdt(msg:Message):
                if msg.chat.type=='private':
                    keywords= get_user_and_keywords(msg.from_user.id)

                    # print(keywords)

                    if len(keywords)==0:
                       await  bot.send_message(msg.chat.id,'üí•üî¶ <b>–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö '
                                                       '—Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑.',parse_mode='html',reply_markup=adddelete_keywords('addonly'))

                    elif len(keywords)>0:
                        keywords_showing=[]
                        for key in keywords:
                              keywords_showing.append(' '.join(key))
                        keywords_showing='\n'.join(keywords_showing)
                        await   bot.send_message(msg.chat.id,f'üí•üî¶ <b>–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n\n{keywords_showing}',
                                          parse_mode='html',reply_markup=adddelete_keywords())

                #to do: —É–±–∏—Ä–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –∫–ª–≤–∞–≤–∏–∞—Ç—É—Ä–µ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ next step handler

        async def add_delete_keyword_handler(callback):
                await bot.edit_message_text('–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n'
                                      '–¢–æ–ª—å–∫–æ <b>–æ–¥–Ω–æ</b> —Å–ª–æ–≤–æ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ!\n'
                                      '–ù–∞–ø—Ä–∏–º–µ—Ä ->\n\nipad 3 mini\niphone 10s\nairpods 2'
                                      , callback.message.chat.id, callback.message.id,
                                      parse_mode='HTML')
                await bot.send_message(callback.message.chat.id,'–ò –∑–∞—Ç–µ–º –∂–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                # print(callback.from_user.id, callback.message.chat.id)
                # await bot.register_next_step_handler(callback.message,add_new_keyword)
                await bot.set_state(chat_id=callback.from_user.id,state=SuperStates.getkeyword,user_id=
                                                  callback.message.chat.id)



















        @bot.message_handler(state=SuperStates.getkeyword)
        async def add_new_keyword(msg:Message):
                if '\n' in msg.text:
                    newkeywordslist=msg.text.lower().split('\n')
                    # print(newkeywordslist)
                    newkeyword=[]
                    for keyword in newkeywordslist:
                        newkeyword=keyword.split(' ')

                        if add_delete_keyword(msg.chat.id, newkeyword, 'add') == 'added':
                             await bot.send_message(msg.chat.id, f'–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ {keyword} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!',reply_markup=menu_keyboard_2stage(msg.chat.id))

                        else:
                                await bot.send_message(msg.chat.id,
                                     '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 1 –∏–∑ 1.\n\n' + premium_offer,
                                     reply_markup=menu_keyboard_2stage(msg.chat.id))



                    # await bot.delete_state(msg.from_user.id, msg.chat.id)
                elif '\n' not in msg.text:
                        newkeyword = msg.text.lower().split(' ')
                        if add_delete_keyword(msg.chat.id,newkeyword,'add') =='added':
                            await bot.send_message(msg.chat.id,'–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!',reply_markup=menu_keyboard_2stage(
                              msg.chat.id))
                            await bot.send_message(msg.chat.id, '–î–æ–±–∞–≤–∏–º –µ—â–µ?',
                                          reply_markup=adddelete_keywords('addonly'))

                        else:
                            await bot.send_message(msg.chat.id, '‚ùå–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 1 –∏–∑ 1.\n\n'+premium_offer,reply_markup=menu_keyboard_2stage(msg.chat.id))
                await bot.delete_state(msg.from_user.id, msg.chat.id)

        @bot.message_handler(commands=['keywordslist_clear'])
        async def kwrd_list_del(callback):
            # print('pltcm')
            if callback.message.chat.type == 'group':
                pass
            else:
                 if add_delete_keyword(callback.message.chat.id,keyword=None,action='clear_list') == 'keywords_clear':
                     await bot.edit_message_text('–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—á–∏—â–µ–Ω',callback.message.chat.id,callback.message.id,reply_markup=adddelete_keywords('addonly'))
                 else:
                      await bot.edit_message_text('–ß—Ç–æ—Ç–æ –Ω–µ —Ç–∞–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º', callback.message.chat.id, callback.message.id)

            #–±–∞–Ω–ª–∏—Å—Ç

        # –ª–æ–≥–∏–∫–∞ –±–ª–æ–∫–∞ –±–∞–Ω–∞
        @bot.message_handler(commands=['banlist_show'])
        async def block_list_show(msg:Message):
                if msg.chat.type=='group':
                    pass
                else:
                    # print(msg.message_id)
                    blocklist=add_delete_get_clear_blocked_users(user_id=msg.from_user.id,action='getall')
                    # print(len(blocklist))
                    if len(blocklist)==0:
                             await bot.send_message(msg.chat.id,'‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—é–¥–∏\n\n–£–ø—Å,—Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç',reply_markup=menu_keyboard_2stage(msg.chat.id))

                    else:
                         await bot.send_message(msg.chat.id,banlist_preview
                                                     ,reply_markup=banlistmarkup(msg.from_user.id,blocklist))

        @bot.message_handler(commands=['banlist_clear'])
        async def block_list_clear(msg:Message):
                if msg.chat.type=='group':
                    pass
                else:
                    # print(msg.message_id)
                    blocklist=add_delete_get_clear_blocked_users(user_id=msg.from_user.id,action='getall')
                    # print(len(blocklist))
                    if len(blocklist)!=0:
                       if add_delete_get_clear_blocked_users(user_id=msg.from_user.id, action='clear')==3:
                             await bot.send_message(msg.chat.id,'‚õî –ë–ª–æ–∫-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ωüßπ')

                    else:
                         await bot.send_message(msg.chat.id,'‚õî–ë–ª–æ–∫-–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç ')



        # –ú–æ–¥—É–ª—å –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º–∞

        @bot.pre_checkout_query_handler(func=lambda query: True)
        async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
            # print(pre_checkout_query)
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,error_message='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')


        @bot.message_handler(content_types=['successful_payment'])
        async def process_successful_payment(msg: Message):
            # print('successful_payment')
            # print(msg)
            # message=json.dumps(message,ensure_ascii=False)
            if str(msg.from_user.id).lower() in str(msg.successful_payment.invoice_payload):
                if controling_premium(msg.from_user.id, new_premium_status=True) == 2:
                    await bot.send_message(msg.chat.id, premium_purchase_ok,
                                     parse_mode='HTML')

            elif str(msg.from_user.id).lower()  not in str(msg.successful_payment.invoice_payload):
                user_pay=str(msg.successful_payment.invoice_payload)[12:]
                # print(user_pay)
                if controling_premium(user_pay, new_premium_status=True) == 2:
                    await bot.send_message(msg.chat.id, premium_purchase_ok,
                                     parse_mode='HTML')

            # –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫

































        # #-----------------------------------------------------------------------------------------------------------------
        #                             –ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
        #     —á–µ–∫–∞—Ç—å –≤—Å–µ —Å–º—Å –∏–∑ —á–∞—Ç–æ–≤
        @bot.message_handler(func=lambda msg:Message )
        async def messagecheck(msg):
                # print(msg.text,msg.chat.id,msg.chat.type)
                if msg.chat.type =='private':
                    if add_users_field(msg.from_user.id,msg.from_user.username,msg.chat.id)!='new added':
                        if out_premium_check(msg.chat.id) in ['skip_prem','skip_notprem']:
                            # print( out_premium_check(msg.chat.id))
                            if '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in msg.text:
                                # print(22)
                                await bot.send_message(msg.chat.id, text=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu_keyboard_1stage())
                            elif '–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä' in msg.text:
                                await sell(msg)
                                # await bot.send_message(msg.chat.id, text=f'–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä:', reply_markup=menu_keyboard_2stage(msg.chat.id))
                                # await bot.send_message(msg.chat.id,'–ø—Ä–æ–¥–∞–∂–∞')

                            elif '–ë–ª–æ–∫-–ª–∏—Å—Ç' in  msg.text:
                                # bot.send_message(msg.chat.id,'–†–∞–∑–¥–µ–ª –ë–ª–æ–∫-–ª–∏—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
                                 await block_list_show(msg)
                            elif '–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã'in msg.text:
                                # print("yes")
                                # bot.send_message(msg.chat.id,'–†–∞–∑–¥–µ–ª –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
                                await bot.send_message(msg.chat.id, '–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å?',
                                                 reply_markup=choosing_keyboard_proccess(msg.chat.id,level='memory'))
                            elif  'Premium-—Ç–∞—Ä–∏—Ñ' in msg.text:
                                if prem_status(msg.chat.id)==True:
                                    await bot.send_message(msg.chat.id,f'–í–∞—à Premium-—Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω\n\n '
                                                                 f'–û—Å—Ç–∞–ª–æ—Å—å {out_premium_check(msg.chat.id,action=True)} –¥–Ω–µ–π ',
                                                     reply_markup=menu_keyboard_2stage(
                                                                 msg.chat.id))
                                else:
                                    await bot.send_message(msg.chat.id, premium_promo+'\n‚ùó‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó‚ùó\n'+premium_promo1,parse_mode='HTML',reply_markup=getfreepremium())
                                    # await bot.send_invoice(msg.chat.id, 'Premium-—Ç–∞—Ä–∏—Ñ', f'–û–ø–ª–∞—Ç–∏—Ç—å '
                                    # #
                                    # #                                                      f'Premium –Ω–∞ 30 –¥–Ω–µ–π ',
                                    # #                                                                    f'_{msg.from_user.id}',
                                    # #                  token_yukassa_payment_GorbushkinService, 'RUB', [LabeledPrice(
                                    # #         '–ö—É–ø–∏—Ç—å', setprice('get') * 100)])
                            elif '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ' in msg.text:
                                await bot.send_message(msg.chat.id, support_info, parse_mode='HTML' )

                            elif  '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' in msg.text:
                                  # print('–∫–ª —Å–ª')
                                  await kwrdupdt(msg)
                            elif  '–ü—Ä–æ–¥–∞–∂–∏ –Ω–∞ –ø–∞—É–∑—É' in msg.text:
                                getchangeplaystatus(msg.chat.id,action=0)
                                await bot.send_message(msg.chat.id, '–ü—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',reply_markup=menu_keyboard_2stage(msg.chat.id))

                                # bot.send_message(msg.chat.id, '–†–∞–∑–¥–µ–ª –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –ø–∞—É–∑—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
                            elif '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏' in msg.text:
                                 getchangeplaystatus(msg.chat.id, action=1)
                                 await bot.send_message(msg.chat.id, '–ü—Ä–æ–¥–∞–∂–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã',reply_markup=menu_keyboard_2stage(msg.chat.id))
                            elif '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤' in msg.text :
                                def get_current_date_numeric():
                                    current_date = datetime.now()
                                    return current_date.strftime("%d.%m")
                                await bot.send_message(msg.chat.id, f'C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {get_current_date_numeric()}')

                                def format_products_for_message(products):
                                    message = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n"
                                    for product, count in products:
                                        # –£–¥–∞–ª—è–µ–º 'iphone' –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                                        product_without_iphone = product.replace('iphone ', '')
                                        message += f"   {product_without_iphone} - {count}\n"

                                    return message
                                def split_message_for_telegram(text, max_length=4096):
                                    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
                                    parts = []
                                    while len(text) > 0:
                                        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
                                        if len(text) <= max_length:
                                            parts.append(text)
                                            break
                                        else:
                                            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                                            split_index = text.rfind('\n', 0, max_length)
                                            if split_index == -1:
                                                # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
                                                split_index = max_length

                                            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
                                            parts.append(text[:split_index])
                                            # –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                            text = text[split_index:]

                                    return parts
                                products=addinf_pos(action='get')
                                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                formatted_message = format_products_for_message(products)

                                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
                                message_parts = split_message_for_telegram(formatted_message)
                                for item in message_parts:
                                    await bot.send_message(msg.chat.id, item)




                            elif '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É Premium' in msg.text:
                                await  pricesetinit(msg)
                            elif '–°–≤–æ–¥–∫–∞' in msg.text:
                                await  userslist(msg)
                            elif '–†–∞—Å—Å—ã–ª–∫–∞' in msg.text:
                                await  bot.send_message(msg.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=mailmenu())
                            elif '–ü—Ä–∞–π—Å–ª–∏—Å—Ç' in msg.text:
                                await  bot.send_message(msg.chat.id, '<b>–ú–æ–π –ü—Ä–∞–π—Å–ª–∏—Å—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                                        parse_mode='html',
                                                        reply_markup=pricelistmenu())
                            else:
                                 await bot.send_message(msg.chat.id,"—Ç—ã –≤–≤–µ–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ, –≤—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞",reply_markup=menu_keyboard_2stage(msg.chat.id))


                        else:
                            await bot.send_message(msg.chat.id,'–£–ø—Å, –≤–∞—à Premium-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫.\n\n'
                                                         '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∫—Ä–∞—Ç–∏–ª–æ—Å—å –¥–æ 1.'
                                                         '\n\n'
                                                         '–ñ–µ–ª–∞–µ—Ç–µ –ü—Ä–æ–¥–ª–∏—Ç—å ? - –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ '
                                                         '<b>Premium-—Ç–∞—Ä–∏—Ñ</b>',
                                             parse_mode='HTML')
                            await messagecheck(msg=msg)

                    else:
                        await welcome(msg)
                if 'group' in msg.chat.type:
                    # print(msg)
                    #–ü–æ —Ç–µ—Ö –ø—Ä–∏—á–∏–Ω–∞–º –º—ã –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∫–Ω–µ–π–Ω –¥–æ–±–∞–≤–ª—è—Ç–µ —Å–µ–±–µ –µ–≥–æ –∏ –º—ã
                    # –æ–±—è–∑–∞—Ç—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è

                    Text = msg.text
                    # print("Text-",Text)
                    sender_id = msg.from_user.id
                    sender_username = msg.from_user.username
                    # print('sender_id sender_username',sender_id,sender_username)
                    crdtl = 'None'
                    if ("_@_set") in Text:
                        crdtl = Text[Text.index('set_@_'):Text.index('_@_set') + 6]
                        Text = Text[Text.index('_@_set') + 6:]
                        # crdtl = crdtl.split('_@_')
                        crdtl = crdtl.split('_@_')
                        sender_id = crdtl[1]
                        sender_username = crdtl[2]
                    else:
                        print("_@_set not in Text")

                    message_correct=Text.lower()
                    # print('—Å–æ–æ—å—â –¥–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª',message_correct)
                    message_correct=message_correct.split(' ')
                    # print(message_correct)
                    for item in message_correct:
                        if item in russiandict.keys():
                            # print('yes',item)
                            message_correct.insert(message_correct.index(item),russiandict[item])
                            message_correct.remove(item)
                    message_correct=' '.join(message_correct)

                    with open('IPHONE_LIST.json', 'r') as f:
                        productlist = json.load(f)
                    priorities_model = []
                    priorities_color = []
                    priorities_memories = []
                    for product in tuple(productlist.keys()):
                        years = productlist[product]
                        for year in tuple(years.keys()):
                            models = years[year]
                            for model in models:
                                if model not in priorities_model:
                                    priorities_model.append(model)
                                specs = models[model]
                                for spec in specs:
                                    colors = specs[spec]
                                    for color in colors:
                                        if color not in priorities_color:
                                            priorities_color.append(color)
                                        memories = colors[color]
                                        for memory in memories:
                                            if memory not in priorities_memories:
                                                priorities_memories.append(memory)

                    # print(priorities_color)
                    # print(priorities_memories)

                    priorities = priorities_memories + priorities_color + priorities_model

                    addinf_pos(text=message_correct,priorities=priorities)









                                       # print('–∞ —Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–µ—Ä–≤–æ–¥–∞',message_correct)
                    users_and_keywords=[]
                    def users_and_keywords_list(access_sending:tuple,users_and_keywords:list):
                        for user_id in  access_sending:
                            # print(user_id)
                            userkwrd=get_user_and_keywords(user_id,checking=True)
                            # print(userkwrd)
                            users_and_keywords.append(userkwrd)
                            # print('—Å–µ–π—á–∞—Å –≤ –ø–æ–ª—å–∑ –∏ –∏—Ö —Å–ª–æ–≤–∞—Ö ==',users_and_keywords)
                        # print(users_and_keywords)
                        return tuple(users_and_keywords)


                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º sender –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—å —É –∫–æ–≥–æ —Ç–æ –≤ –±–∞–Ω–ª–∏—Å—Ç–µ –∏ –≤—ã—Å—ã–ª–∞–µ–º —Å–ø–∏—Å–æ–∫  —Ç–µ—Ö —É –∫–æ–≥–æ —É –æ–Ω –Ω–µ –≤ –±–∞–Ω–µ
                    access_sending = get_users_without_sendusermsg_in_blocklist(sender_id)
                    # print('–Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫ –ª–∏—Å—Ç–µ ',access_sending)
                    # –∫–æ—Ä—Ç–µ–∂ –∏–∑ —é–∑–µ—Ä–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ,—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞—è –≤—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–±–æ—Ä
                    # —Ç–æ–≤–∞—Ä–æ–≤
                    checkinglist = users_and_keywords_list(access_sending,users_and_keywords)
                    # print('–∫–æ–≥–æ –∏ –ø–æ —á–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞',checkinglist)

                    # –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    for user_keys in checkinglist:

                        user_id_to=int(user_keys[0])
                        keywords_check=user_keys[1]
                        # print(user_id_to)
                        # print('—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–ª–æ–≤ ',keywords_check)


                        # print(priorities)


                        for kwrd in keywords_check:
                            # print('clovo',kwrd)
                            need_send = []
                            guarantee=0
                            for key in kwrd:
                                # print('elslova',key)
                                if str(key).lower() in  message_correct.lower():

                                    need_send.append(1)
                                    if str(key).lower() in priorities:
                                        guarantee+=1
                                else:
                                    # if str(key).lower() not in priorities:
                                        need_send.append(0)

                            # print(need_send,guarantee,message_correct,user_id_to)
                            # print(need_send,not_need,sender_id,user_id_to)
                            if sender_username == 0 and sender_id == 0:
                                sender_username = msg.from_user.username
                                sender_id = msg.from_user.id
                            # print()
                            if 0 not in need_send or (0 in need_send and guarantee>=2):
                                # if user_id_to!=int(sender_id):
                                    if getchangeplaystatus(user_id_to,action='get')!=0:

                                        # print("sender_username:",sender_username,"      sender_id",sender_id,'  user_id_to',
                                              # user_id_to)

                                        link_text = f"[{sender_username}](https://t.me/{sender_username})\n\n" \
                                                    f"{Text}"
                                        try:
                                            await bot.send_message(user_id_to, link_text, parse_mode='Markdown', disable_web_page_preview=True,reply_markup=block_keyboard(sender_id,sender_username,banlist=None))
                                        except Exception as e:
                                            pass
                                        break
                                        pass
                            # else:
                            #     need_send = 0
                            #     not_need = 0

















        #-----------------------------------------------------------------------------------------------------------------
        #     Callback-–ª–æ–≥–∏–∫–∞
        @bot.callback_query_handler(func=lambda callback:callback.data)
        async def callback_logic(callback):
                    # print(callback.data)
                    # /–ª–æ–≥–∏–∫–∞ –±–∞–Ω–∞
                    if callback.data == 'banlist_show':
                            blocklist = add_delete_get_clear_blocked_users(user_id=callback.message.chat.id, action='getall')
                            if len(blocklist) == 0:
                                 await bot.edit_message_text(f'‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—é–¥–∏\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç', callback.message.chat.id,
                                                  callback.message.id)
                            else:
                                 await bot.edit_message_text(f'‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—é–¥–∏ –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–µ:\n\n–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö /banlist_clear\n\n–£–¥–∞–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –ë–ª–æ–∫-–ª–∏—Å—Ç–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ',
                                                  callback.message.chat.id,
                                                    callback.message.id, reply_markup=banlistmarkup(callback.message.chat.id,blocklist))

                    elif str(callback.data).startswith('ban_') and not str(callback.data).endswith("_banlist"):
                        print(callback.data)
                        clback=callback.data.split('_')
                        # print(clback)
                        block_id = int(clback[1])
                        block_name=clback[2]
                        need_ban=[]
                        blocklist=add_delete_get_clear_blocked_users(block_id, block_name, callback.message.chat.id, 'getall')
                        print(blocklist)
                        if len(blocklist)==0:
                            if add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')==1:
                                 await bot.edit_message_text(f'üîí {block_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a) üîí',callback.message.chat.id,callback.message.id,reply_markup=unblock_keyboard(block_id, block_name,None))
                        else:
                            for ban_item in blocklist:
                                if block_id  not in ban_item:
                                    need_ban.append(1)
                                else :
                                    need_ban.append(0)
                            print('need_ban',need_ban)
                            if 0 not in need_ban:
                                if add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')==1:
                                    await bot.edit_message_text(f'üîí {block_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a) üîí',callback.message.chat.id,
                                                          callback.message.id,reply_markup=unblock_keyboard(block_id,
                                                                                                            block_name,None))
                            else:
                                if add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')==1:
                                    await bot.edit_message_text(f'üîí {block_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a) üîí',callback.message.chat.id,
                                                          callback.message.id,reply_markup=unblock_keyboard(block_id,
                                                                                                            block_name,None))

                    elif str(callback.data).startswith('ban_')  and str(callback.data).endswith("_banlist"):
                        # print("ban_banlist")
                        clback=callback.data.split('_')
                        block_id = int(clback[1])
                        block_name=clback[2]
                        need_ban=[]
                        blocklist= add_delete_get_clear_blocked_users(block_id,block_name,callback.message.chat.id,'getall')
                        if len(blocklist)==0:
                            if add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')==1:
                                  await bot.edit_message_text(f'üîí {block_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a)\n‚ùå–ò —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–≥–æ –±–æ–ª—å—à–µ –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–µ –±—É–¥—É—Ç',callback.message.chat.id,callback.message.id,reply_markup=unblock_keyboard(block_id, block_name,True))
                        else:
                            for ban_item in blocklist:
                                if block_id  not in ban_item:
                                    need_ban.append(0)
                                else :
                                    need_ban.append(1)
                            # print(need_ban)
                            if 1 not in need_ban:
                                if add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')==1:
                                  await bot.edit_message_text(f'üîí {block_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a)\n‚ùå–ò —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–≥–æ –±–æ–ª—å—à–µ –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–µ –±—É–¥—É—Ç',callback.message.chat.id,callback.message.id,reply_markup=unblock_keyboard(block_id, block_name,True))
                                elif     add_delete_get_clear_blocked_users(block_id=block_id,block_name= block_name, user_id= callback.from_user.id,action='add')=='2.1':
                                    await bot.edit_message_text(
                                    f' ‚ö†Ô∏è–û—à–∏–±–∫–∞! {block_name} —É–∂–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ —Ä–∞–Ω–Ω–µ–µ –≤—ã –µ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏',
                                    callback.message.chat.id, callback.message.id,
                                    reply_markup=menu_keyboard_2stage(callback.message.from_user.id))

                    elif str(callback.data).startswith('unban_') and not str(callback.data).endswith("_banlist"):
                        print('unban 1')
                        print(callback)
                        clback = callback.data.split('_')
                        unblock_id = int(clback[1])
                        unblock_name = clback[2]
                        # print(unblock_id,unblock_name)
                        blocklist=add_delete_get_clear_blocked_users(unblock_id, unblock_name, callback.message.chat.id, 'getall')
                        if len(blocklist)==0:
                            await bot.edit_message_text(
                                f'‚úÖ {unblock_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a)',
                                callback.message.chat.id, callback.message.id,
                                reply_markup=block_keyboard(block_id=unblock_id, block_name=unblock_name, banlist=None))
                        else:
                            for ban_item in add_delete_get_clear_blocked_users(unblock_id,unblock_name,callback.message.chat.id,'getall'):
                                # print('1====')
                                if unblock_id in ban_item:
                                    # print(unblock_id,'E—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
                                    if add_delete_get_clear_blocked_users(unblock_id,unblock_name,callback.message.chat.id,'delete')==2 :
                                        await bot.edit_message_text(f'‚úÖ {unblock_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a)', callback.message.chat.id, callback.message.id,
                                    reply_markup=block_keyboard(block_id= unblock_id,block_name= unblock_name,banlist=None))
                                else:
                                    await bot.edit_message_text(
                                    f'‚úÖ {unblock_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a)',
                                    callback.message.chat.id, callback.message.id,
                                    reply_markup=block_keyboard(block_id=unblock_id, block_name=unblock_name, banlist=None))
                    elif str(callback.data).startswith('unban_') and str(callback.data).endswith("_banlist"):
                            clback = callback.data.split('_')
                            unblock_id = int(clback[1])
                            unblock_name = clback[2]
                            # print(unblock_id,unblock_name)
                            for ban_item in add_delete_get_clear_blocked_users(unblock_id, unblock_name, callback.message.chat.id,
                                                                               'getall'):
                                if unblock_id in ban_item:
                                # print(unblock_id, 'E—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
                                    if add_delete_get_clear_blocked_users(unblock_id, unblock_name, callback.message.chat.id, 'delete') == 2:
                                        await bot.edit_message_text(f'üîì {unblock_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(a) \n‚úÖ–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', callback.message.chat.id, callback.message.id, reply_markup=block_keyboard(block_id=unblock_id,block_name=unblock_name,banlist=True))

                    elif callback.data=="add_keyword":
                        await  add_delete_keyword_handler(callback)
                    elif callback.data in 'delete_keywords':
                        await kwrd_list_del(callback)
                         #–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ö–∞–ª—è–≤—ã
                    elif callback.data == "free_premium":
                        await bot.delete_message(callback.message.chat.id, callback.message.id )
                        if controling_premium(callback.message.chat.id, True) in [2, 1]:
                           await bot.send_message(callback.message.chat.id, premium_bonus, parse_mode='HTML')

                    elif str(callback.data).startswith('construct_') and str(callback.data).endswith('_stepyear'):
                        product_name=callback.data.split('_')[1]
                        await bot.edit_message_text(
                            '–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å?',
                            callback.message.chat.id, callback.message.id,parse_mode="HTML",
                            reply_markup=choosing_keyboard_proccess(callback.message.chat.id,'year',callback.data,{f'{product_name}':f'‚úÖ'}))


                    elif str(callback.data).startswith('construct_') and str(callback.data).endswith('_stepmemory'):
                        # product_name = callback.data.split('_')[1]
                        # product_year = callback.data.split('_')[2]

                        await bot.edit_message_text(
                        # f'–¢–æ–≤–∞—Ä: <b>{product_name.capitalize()}</b>‚úÖ\n' \
                        # f'–ì–æ–¥ –ª–∏–Ω–µ–π–∫–∏: {product_year} ‚úÖ\n' \
                        # f'–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏—é, —Ü–≤–µ—Ç, –ø–∞–º—è—Ç—å ‚§µ',
                            '–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å?',
                        callback.message.chat.id, callback.message.id, parse_mode = "HTML",
                        reply_markup = choosing_keyboard_proccess(callback.message.chat.id, 'memory', callback.data))

                    elif str(callback.data).startswith('construct_') and str(callback.data).endswith('_add'):
                        # print(callback.data)
                        product_name = callback.data.split('_')[1]
                        product_year = callback.data.split('_')[2]
                        product_model=callback.data.split('_')[3]
                        # print(product_name,product_year,product_model)

                        product_spec = callback.data.split('_')[4]
                        product_color=callback.data.split('_')[5]
                        product_memory = callback.data.split('_')[6]






                        if product_spec == 'orig':

                                    new_choosed_item = {f'{product_name}_{product_year}_{product_model}_{product_spec}_{product_color}'
                                                        f'_{product_memory}':[
                                        product_name,product_model,product_color,product_memory]}
                                    stroke_stat = (' ').join([
                                        product_name,product_model,product_color,product_memory])
                        else:
                                    new_choosed_item = {f'{product_name}_{product_year}_{product_model}_{product_spec}_{product_color}'
                                                        f'_{product_memory}':[
                                        product_name,product_model,product_spec,product_color,product_memory]}
                                    stroke_stat=(' ').join([
                                        product_name,product_model,product_spec,product_color,product_memory])

                        # print(new_choosed_item)

                        # addinf_pos(stroke_stat)


                        if prem_status(callback.message.chat.id)==True:
                            get_add_del_choosed_item(callback.message.chat.id,"add",new_choosed_item)
                            await bot.edit_message_text('–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å?', callback.message.chat.id,
                                                  callback.message.id,
                                                  reply_markup=choosing_keyboard_proccess(callback.message.chat.id,
                                                                                          level='memory',
                                                                                          construct=f'construct_{product_name}_{product_year}_stepmemory'))

                        else:
                            if len(tuple( get_add_del_choosed_item(callback.message.chat.id,"get").keys()))<1:
                                # print('–ø—Ä–æ–±–ª–µ–º–∞',len(tuple( get_add_del_choosed_item(callback.message.chat.id,"get").keys())))
                                get_add_del_choosed_item(callback.message.chat.id, "add", new_choosed_item)
                                await bot.edit_message_text('–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å?', callback.message.chat.id,
                                                      callback.message.id,
                                                      reply_markup=choosing_keyboard_proccess(callback.message.chat.id,
                                                                                              level='memory',
                                                                                              construct=f'construct_{product_name}_{product_year}_stepmemory'))

                            else:
                                # bot.edit_message_text(premium_offer, callback.message.chat.id,
                                #                       callback.message.id)
                                await bot.send_message(callback.message.chat.id,premium_offer)


                                # else:


                        # else:
                        #         bot.edit_message_text(
                        #          f'<b>–õ–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω‚ùå </b>\n\n'+Text_of_messages.premium_offer,
                        #                 callback.message.chat.id, callback.message.id, parse_mode="HTML")


                    elif str(callback.data).startswith('construct_') and str(callback.data).endswith('_delete'):
                        # print(callback.data)
                        product_name = callback.data.split('_')[1]
                        product_year = callback.data.split('_')[2]
                        product_model = callback.data.split('_')[3]


                        product_spec = callback.data.split('_')[4]
                        product_color = callback.data.split('_')[5]
                        product_memory = callback.data.split('_')[6]

                        # print(product_name, product_year, product_model,product_spec,product_color,pr)
                        to_del=f'{product_name}_{product_year}_{product_model}_{product_spec}_{product_color}'\
                                                        f'_{product_memory}'
                        if to_del in tuple(get_add_del_choosed_item(callback.message.chat.id,"get").keys()):
                            if get_add_del_choosed_item(callback.message.chat.id,"del",to_del)=='deleted':
                                await bot.edit_message_text('–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å?', callback.message.chat.id,  callback.message.id,
                        reply_markup = choosing_keyboard_proccess(callback.message.chat.id,
                                                                  level='memory',
                                                                  construct=f'construct_{product_name}_{product_year}_stepmemory'))

                    # –±–ª–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
                    elif callback.data=='reject_new_mail':
                            await bot.delete_message(callback.message.chat.id,callback.message.id)
                            await bot.delete_state(callback.from_user.id, callback.message.chat.id)
                    elif callback.data == 'change_name_mail':
                        await bot.edit_message_text('–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', callback.message.chat.id,
                                                    callback.message.id)
                        await bot.set_state(callback.from_user.id,SuperStates.getnamemail,callback.message.chat.id)
                    elif callback.data=='change_content_mail':
                        await bot.edit_message_text('–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', callback.message.chat.id,
                                                    callback.message.id)
                        await bot.set_state(callback.from_user.id,SuperStates.get—Åontentmail,callback.message.chat.id)
                    elif callback.data == 'add_list_mail':
                        async with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
                            print(data,'clbck')
                            if mail_db(data['namemail'],data['contentmail'],action='add') =="added":
                                await bot.send_message(callback.message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                                                       reply_markup=mailmenu())
                                await bot.delete_message(callback.message.chat.id, callback.message.id)
                                await bot.delete_state(callback.from_user.id, callback.message.chat.id)

                            else:
                                await bot.delete_message(callback.message.chat.id,callback.message.id)
                                await bot.send_message(callback.message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º {data['namemail']} "
                                                                                 "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ó–∞–º–µ–Ω–∏—Ç–µ –∏–º—è –∏ "
                                                                                 "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ "
                                                                                 )
                                await bot.set_state(callback.from_user.id,SuperStates.getnamemail,callback.message.chat.id)
                    elif callback.data=='add_mail_item':
                        print(callback,'----------')
                        await bot.edit_message_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±—É–¥—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏',
                                                    callback.message.chat.id, callback.message.id)
                        await bot.set_state(callback.from_user.id,SuperStates.getnamemail,callback.message.chat.id)
                        async with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
                            print('mailingnameprocess', data)
                            data['namemail'] = None
                            data['contentmail']=None
                    elif callback.data.startswith('mail_send_'):
                        print(callback.data)
                        name = callback.data.split("_")[2]
                        text=mail_db(namemail=name,action='get')
                        mail=f'{text}'
                        async def instant_sending_mail(text):
                            userslist=all_users_list(action='get')
                            allauditory=len(userslist)
                            # userslist=[6724529493,704718950]
                            auditory=0
                            for user in userslist:
                                print(user)
                                try:
                                    await bot.send_message(user,mail,parse_mode='html')
                                    auditory+=1

                                except Exception as e:
                                    print(e)
                            return auditory, allauditory
                        auditory,allauditory= await  instant_sending_mail(mail)
                        await bot.send_message(callback.message.chat.id,
                                               f"–†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ {auditory} –∏–∑ {allauditory}",
                                               parse_mode='html',
                                               reply_markup=mailopenmenu(name))
                    elif callback.data=='my_mail_list':
                        if len( mail_db(action='list'))>0:
                            await bot.edit_message_text(f"–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É ",callback.message.chat.id,callback.message.id,
                                               reply_markup=mail_list_db_kb(action='list'))
                        else:
                            await bot.edit_message_text( f"–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ ",
                             callback.message.chat.id,callback.message.id,
                                                   reply_markup=mail_list_db_kb(action='back'))
                    elif callback.data == 'my_mail_menu':
                        await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',callback.message.chat.id,callback.message.id,
                                                    reply_markup=mailmenu())
                    elif callback.data.startswith('mail_open_'):
                        print(callback.data)
                        name=callback.data.split("_")[2]
                        text=mail_db(namemail=name,action='get')
                        await bot.send_message(callback.message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ <b>{name.capitalize()}</b>\n\n{text}",
                                               parse_mode='html',
                                               reply_markup=mailopenmenu(name))
                    elif callback.data.startswith('mail_delete_'):
                        name = callback.data.split("_")[2]
                        if mail_db(namemail=name,action='delete')=='delete':
                            await bot.send_message(callback.message.chat.id,
                                                   f"–†–∞—Å—Å—ã–ª–∫–∞ <b>{name.capitalize()}</b> —É–¥–∞–ª–µ–Ω–∞",
                                                   parse_mode='html',
                                                   )

                            if len(mail_db(action='list')) > 0:
                                await bot.edit_message_text(f"–†–∞—Å—Å—ã–ª–∫–∞ <b>{name.capitalize()}</b> —É–¥–∞–ª–µ–Ω–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É ",
                                                            callback.message.chat.id, callback.message.id,
                                                            parse_mode='html',
                                                            reply_markup=mail_list_db_kb(action='list'))
                            else:
                                await bot.edit_message_text(f"–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ ",
                                                            callback.message.chat.id, callback.message.id,
                                                            reply_markup=mail_list_db_kb(action='back'))
                        await bot.delete_state(callback.from_user.id, callback.message.chat.id)
        #                 –±–ª–æ–∫ –ø—Ä–∞–π—Å–ª–∏—Å—Ç
                    elif callback.data=='upload_pricelist':
                        await bot.send_message(callback.message.chat.id,
                                               f"<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –ø—Ä–∞–π—Å–ª–∏—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ EXCEL-—Ñ–∞–π–ª–∞</b>\n\n"
                                               f"<b>–ü—Ä–∞–π—Å–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>‚ùó‚ùó‚ùó\n\n–≤ 1 —Å—Ç–æ–ª–±—Ü–µ - —Ç–æ–≤–∞—Ä, "
                                               f"–≤–æ 2-–æ–º - —Ü–µ–Ω–∞\n\n"
                                               f"–ü—Ä–∏–º–µ—Ä: https://clck.ru/37V8L5",disable_web_page_preview=True,
                                               parse_mode='html'
                                               )
                        await bot.set_state(callback.from_user.id, SuperStates.getpricelist, callback.message.chat.id)


                    elif callback.data=='get_pricelist':
                        def format_products_data(data):
                            message = "<u><b>–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–∞–π—Å–ª–∏—Å—Ç</b></u>üí∞\n\n"
                            for product, price in data:
                                message += f"<b>{product.capitalize()}</b> : {int(price)} ‚ÇΩ\n"
                            return message

                        data = get_products_data(callback.from_user.id)
                        formatted_message = format_products_data(data)
                        await  bot.send_message(callback.message.chat.id, formatted_message,parse_mode='html')

        bot.add_custom_filter(asyncio_filters.StateFilter(bot))
        await bot.polling(non_stop=True)





async def serverside(app):
    # –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
    async  def recall_pricelist(msg):
        print('–¥–æ—à–ª–æ')
        tasks=await checking_products_bd(msg)
        # parse_mode='Markdown'
        for task in tasks:
            items,seller,customer=task

            price_offer=f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç [{seller}](https://t.me/{seller}):\n\n'
            for item in items:
                price_offer+=f'{item[0].capitalize() }: {int(item[1])}\n'
            print(price_offer)
            await asyncio.sleep(2)
            await app.send_message(chat_id=customer,text=price_offer)


    async def send_message_with_interval(app, chat_id, text, interval):

        await asyncio.sleep(interval)
        try:
            await app.send_message(chat_id=chat_id, text=text)

        except Exception as e:
            task_list.append(send_message_with_interval(app,chat_id,text,interval))


    @app.on_message()
    async def forward_to_private_chat(app, message):
        chat_ids = [-1001995766142, -1002018161709, -1002091805379, -1001869659170, -1002101187519, -1002011356796, -1001995187845, -1002057441036, -1002049302049, -1002014932385, -1002060439501]
        # print(message)
        
        if int(message.chat.id) not in chat_ids:

                user_id=message.from_user.id
                text=str(message.text).lower()
                resolve=json.loads(str(message.from_user))
                global last_message_len
                # print(last_message_len)
                if last_message_len==len(text):
                    # print('equal')
                    pass
                else:

                    if 'username' in resolve.keys():
                            if 'bot' not in text :
                                usrnm = message.from_user.username
                                if any(keyword in text for keyword in ['–∫—É–ø–ª—é', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ', '–∏—â—É','?','–∫—É–ø–∏—Ç—å',
                                                                               'buy','–∏—â—É']):
                                    await recall_pricelist(message)
                                    # print('-------------\n',resolve['username'])
                                    # print(message.text)
                                    random.shuffle(chat_ids)

                                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                                    random_chat_id = int(chat_ids[0])

                                    task_list.append(send_message_with_interval(app,  random_chat_id,
                                        f'set_@_{user_id}_@_{usrnm}_@_set{message.text}', 0.1))
                                    last_message_len=len(text)

    pass
async def autoseller(seller_bot):
    pass













async def checking ():
    global wait_seconds
    wait_seconds=1
    first_len=0

    while True:
        from pyrogram.errors.exceptions.flood_420 import FloodWait
        first_len = len(task_list)

        await asyncio.sleep(5)
            # print('—Ç–∞—Å–∫–∏=',task_list,len(task_list))

        if len(task_list)>5 or first_len==len(task_list) or len(task_list)-first_len<4 :
                for task in task_list.copy():
                    await asyncio.sleep(wait_seconds)
                    try:
                            await task
                            task_list.remove(task)
                            wait_seconds=1

                    except Exception :
                        pass




async def main():
    global task_list
    task_list=[]
    app = Client("salesbot")
    bot = AsyncTeleBot(token=token_test_02,
                       state_storage=STM())
    scheduler = BackgroundScheduler()
    # –æ–±–Ω—É–ª—è—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
    def reset_column_values():
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–µ
        conn = sqlite3.connect('bot_db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE stats SET query_count = 0")
        conn.commit()
        conn.close()

        # print(f"–ó–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ  —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω—É–ª–µ–Ω—ã.")

    import sqlfile
    scheduler.add_job(reset_column_values, 'cron', hour=23, minute=59,
                      )

    scheduler.start()


    await asyncio.gather (asyncio.create_task(checking()),
                          asyncio.create_task(clientside(bot)),asyncio.create_task(serverside(await app.start())))


    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
if __name__ == '__main__':
    asyncio.run(main())

















